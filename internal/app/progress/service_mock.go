// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package progress is a generated GoMock package.
package progress

import (
	context "context"
	reflect "reflect"
	achievements "uiren/internal/app/achievements"

	gomock "github.com/golang/mock/gomock"
)

// MockprogressReceiverRepo is a mock of progressReceiverRepo interface.
type MockprogressReceiverRepo struct {
	ctrl     *gomock.Controller
	recorder *MockprogressReceiverRepoMockRecorder
}

// MockprogressReceiverRepoMockRecorder is the mock recorder for MockprogressReceiverRepo.
type MockprogressReceiverRepoMockRecorder struct {
	mock *MockprogressReceiverRepo
}

// NewMockprogressReceiverRepo creates a new mock instance.
func NewMockprogressReceiverRepo(ctrl *gomock.Controller) *MockprogressReceiverRepo {
	mock := &MockprogressReceiverRepo{ctrl: ctrl}
	mock.recorder = &MockprogressReceiverRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprogressReceiverRepo) EXPECT() *MockprogressReceiverRepoMockRecorder {
	return m.recorder
}

// getAchievementProgress mocks base method.
func (m *MockprogressReceiverRepo) getAchievementProgress(ctx context.Context, userID string, achID int) (UserAchievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAchievementProgress", ctx, userID, achID)
	ret0, _ := ret[0].(UserAchievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAchievementProgress indicates an expected call of getAchievementProgress.
func (mr *MockprogressReceiverRepoMockRecorder) getAchievementProgress(ctx, userID, achID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAchievementProgress", reflect.TypeOf((*MockprogressReceiverRepo)(nil).getAchievementProgress), ctx, userID, achID)
}

// getAchievementsProgress mocks base method.
func (m *MockprogressReceiverRepo) getAchievementsProgress(ctx context.Context, id string) ([]UserAchievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAchievementsProgress", ctx, id)
	ret0, _ := ret[0].([]UserAchievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAchievementsProgress indicates an expected call of getAchievementsProgress.
func (mr *MockprogressReceiverRepoMockRecorder) getAchievementsProgress(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAchievementsProgress", reflect.TypeOf((*MockprogressReceiverRepo)(nil).getAchievementsProgress), ctx, id)
}

// getAllBadges mocks base method.
func (m *MockprogressReceiverRepo) getAllBadges(ctx context.Context) ([]Badge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllBadges", ctx)
	ret0, _ := ret[0].([]Badge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllBadges indicates an expected call of getAllBadges.
func (mr *MockprogressReceiverRepoMockRecorder) getAllBadges(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllBadges", reflect.TypeOf((*MockprogressReceiverRepo)(nil).getAllBadges), ctx)
}

// getUserBadges mocks base method.
func (m *MockprogressReceiverRepo) getUserBadges(ctx context.Context, id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserBadges", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserBadges indicates an expected call of getUserBadges.
func (mr *MockprogressReceiverRepoMockRecorder) getUserBadges(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserBadges", reflect.TypeOf((*MockprogressReceiverRepo)(nil).getUserBadges), ctx, id)
}

// getXP mocks base method.
func (m *MockprogressReceiverRepo) getXP(ctx context.Context, id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getXP", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getXP indicates an expected call of getXP.
func (mr *MockprogressReceiverRepoMockRecorder) getXP(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getXP", reflect.TypeOf((*MockprogressReceiverRepo)(nil).getXP), ctx, id)
}

// getXPLeaderboard mocks base method.
func (m *MockprogressReceiverRepo) getXPLeaderboard(ctx context.Context, limit int) (XPLeaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getXPLeaderboard", ctx, limit)
	ret0, _ := ret[0].(XPLeaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getXPLeaderboard indicates an expected call of getXPLeaderboard.
func (mr *MockprogressReceiverRepoMockRecorder) getXPLeaderboard(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getXPLeaderboard", reflect.TypeOf((*MockprogressReceiverRepo)(nil).getXPLeaderboard), ctx, limit)
}

// MockprogressUpdaterRepo is a mock of progressUpdaterRepo interface.
type MockprogressUpdaterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockprogressUpdaterRepoMockRecorder
}

// MockprogressUpdaterRepoMockRecorder is the mock recorder for MockprogressUpdaterRepo.
type MockprogressUpdaterRepoMockRecorder struct {
	mock *MockprogressUpdaterRepo
}

// NewMockprogressUpdaterRepo creates a new mock instance.
func NewMockprogressUpdaterRepo(ctrl *gomock.Controller) *MockprogressUpdaterRepo {
	mock := &MockprogressUpdaterRepo{ctrl: ctrl}
	mock.recorder = &MockprogressUpdaterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprogressUpdaterRepo) EXPECT() *MockprogressUpdaterRepoMockRecorder {
	return m.recorder
}

// addBadges mocks base method.
func (m *MockprogressUpdaterRepo) addBadges(ctx context.Context, tx transaction, req AddBadgesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addBadges", ctx, tx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// addBadges indicates an expected call of addBadges.
func (mr *MockprogressUpdaterRepoMockRecorder) addBadges(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addBadges", reflect.TypeOf((*MockprogressUpdaterRepo)(nil).addBadges), ctx, tx, req)
}

// addXP mocks base method.
func (m *MockprogressUpdaterRepo) addXP(ctx context.Context, tx transaction, req AddXPRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addXP", ctx, tx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// addXP indicates an expected call of addXP.
func (mr *MockprogressUpdaterRepoMockRecorder) addXP(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addXP", reflect.TypeOf((*MockprogressUpdaterRepo)(nil).addXP), ctx, tx, req)
}

// beginTransaction mocks base method.
func (m *MockprogressUpdaterRepo) beginTransaction(ctx context.Context) (transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "beginTransaction", ctx)
	ret0, _ := ret[0].(transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// beginTransaction indicates an expected call of beginTransaction.
func (mr *MockprogressUpdaterRepoMockRecorder) beginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "beginTransaction", reflect.TypeOf((*MockprogressUpdaterRepo)(nil).beginTransaction), ctx)
}

// insertBadge mocks base method.
func (m *MockprogressUpdaterRepo) insertBadge(ctx context.Context, req Badge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "insertBadge", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// insertBadge indicates an expected call of insertBadge.
func (mr *MockprogressUpdaterRepoMockRecorder) insertBadge(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "insertBadge", reflect.TypeOf((*MockprogressUpdaterRepo)(nil).insertBadge), ctx, req)
}

// updateAchievementProgress mocks base method.
func (m *MockprogressUpdaterRepo) updateAchievementProgress(ctx context.Context, tx transaction, req UpdateAchievementProgressRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateAchievementProgress", ctx, tx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateAchievementProgress indicates an expected call of updateAchievementProgress.
func (mr *MockprogressUpdaterRepoMockRecorder) updateAchievementProgress(ctx, tx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateAchievementProgress", reflect.TypeOf((*MockprogressUpdaterRepo)(nil).updateAchievementProgress), ctx, tx, req)
}

// MockachievementService is a mock of achievementService interface.
type MockachievementService struct {
	ctrl     *gomock.Controller
	recorder *MockachievementServiceMockRecorder
}

// MockachievementServiceMockRecorder is the mock recorder for MockachievementService.
type MockachievementServiceMockRecorder struct {
	mock *MockachievementService
}

// NewMockachievementService creates a new mock instance.
func NewMockachievementService(ctrl *gomock.Controller) *MockachievementService {
	mock := &MockachievementService{ctrl: ctrl}
	mock.recorder = &MockachievementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockachievementService) EXPECT() *MockachievementServiceMockRecorder {
	return m.recorder
}

// GetAchievement mocks base method.
func (m *MockachievementService) GetAchievement(ctx context.Context, id int) (achievements.AchievementDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchievement", ctx, id)
	ret0, _ := ret[0].(achievements.AchievementDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchievement indicates an expected call of GetAchievement.
func (mr *MockachievementServiceMockRecorder) GetAchievement(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchievement", reflect.TypeOf((*MockachievementService)(nil).GetAchievement), ctx, id)
}
