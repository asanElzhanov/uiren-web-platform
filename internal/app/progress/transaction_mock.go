// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package progress is a generated GoMock package.
package progress

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgx/v5/pgconn"
)

// Mocktransaction is a mock of transaction interface.
type Mocktransaction struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionMockRecorder
}

// MocktransactionMockRecorder is the mock recorder for Mocktransaction.
type MocktransactionMockRecorder struct {
	mock *Mocktransaction
}

// NewMocktransaction creates a new mock instance.
func NewMocktransaction(ctrl *gomock.Controller) *Mocktransaction {
	mock := &Mocktransaction{ctrl: ctrl}
	mock.recorder = &MocktransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktransaction) EXPECT() *MocktransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *Mocktransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MocktransactionMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*Mocktransaction)(nil).Commit), ctx)
}

// Exec mocks base method.
func (m *Mocktransaction) Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, sql}
	for _, a := range arguments {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MocktransactionMockRecorder) Exec(ctx, sql interface{}, arguments ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, sql}, arguments...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*Mocktransaction)(nil).Exec), varargs...)
}

// Rollback mocks base method.
func (m *Mocktransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MocktransactionMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*Mocktransaction)(nil).Rollback), ctx)
}
