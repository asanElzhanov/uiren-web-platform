// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package users is a generated GoMock package.
package users

import (
	context "context"
	reflect "reflect"
	progress "uiren/internal/app/progress"

	gomock "github.com/golang/mock/gomock"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// checkUserExists mocks base method.
func (m *Mockrepository) checkUserExists(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "checkUserExists", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// checkUserExists indicates an expected call of checkUserExists.
func (mr *MockrepositoryMockRecorder) checkUserExists(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "checkUserExists", reflect.TypeOf((*Mockrepository)(nil).checkUserExists), ctx, username)
}

// createUser mocks base method.
func (m *Mockrepository) createUser(ctx context.Context, params CreateUserDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createUser", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createUser indicates an expected call of createUser.
func (mr *MockrepositoryMockRecorder) createUser(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createUser", reflect.TypeOf((*Mockrepository)(nil).createUser), ctx, params)
}

// enableUser mocks base method.
func (m *Mockrepository) enableUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "enableUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// enableUser indicates an expected call of enableUser.
func (mr *MockrepositoryMockRecorder) enableUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "enableUser", reflect.TypeOf((*Mockrepository)(nil).enableUser), ctx, username)
}

// getAllUsers mocks base method.
func (m *Mockrepository) getAllUsers(ctx context.Context) ([]UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllUsers", ctx)
	ret0, _ := ret[0].([]UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllUsers indicates an expected call of getAllUsers.
func (mr *MockrepositoryMockRecorder) getAllUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllUsers", reflect.TypeOf((*Mockrepository)(nil).getAllUsers), ctx)
}

// getUserByEmail mocks base method.
func (m *Mockrepository) getUserByEmail(ctx context.Context, email string) (UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByEmail", ctx, email)
	ret0, _ := ret[0].(UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByEmail indicates an expected call of getUserByEmail.
func (mr *MockrepositoryMockRecorder) getUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByEmail", reflect.TypeOf((*Mockrepository)(nil).getUserByEmail), ctx, email)
}

// getUserByID mocks base method.
func (m *Mockrepository) getUserByID(ctx context.Context, id string) (UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByID", ctx, id)
	ret0, _ := ret[0].(UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByID indicates an expected call of getUserByID.
func (mr *MockrepositoryMockRecorder) getUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByID", reflect.TypeOf((*Mockrepository)(nil).getUserByID), ctx, id)
}

// getUserByUsername mocks base method.
func (m *Mockrepository) getUserByUsername(ctx context.Context, username string) (UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getUserByUsername", ctx, username)
	ret0, _ := ret[0].(UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getUserByUsername indicates an expected call of getUserByUsername.
func (mr *MockrepositoryMockRecorder) getUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getUserByUsername", reflect.TypeOf((*Mockrepository)(nil).getUserByUsername), ctx, username)
}

// updateUser mocks base method.
func (m *Mockrepository) updateUser(ctx context.Context, dto UpdateUserDTO) (UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateUser", ctx, dto)
	ret0, _ := ret[0].(UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// updateUser indicates an expected call of updateUser.
func (mr *MockrepositoryMockRecorder) updateUser(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateUser", reflect.TypeOf((*Mockrepository)(nil).updateUser), ctx, dto)
}

// MockProgressService is a mock of ProgressService interface.
type MockProgressService struct {
	ctrl     *gomock.Controller
	recorder *MockProgressServiceMockRecorder
}

// MockProgressServiceMockRecorder is the mock recorder for MockProgressService.
type MockProgressServiceMockRecorder struct {
	mock *MockProgressService
}

// NewMockProgressService creates a new mock instance.
func NewMockProgressService(ctrl *gomock.Controller) *MockProgressService {
	mock := &MockProgressService{ctrl: ctrl}
	mock.recorder = &MockProgressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressService) EXPECT() *MockProgressServiceMockRecorder {
	return m.recorder
}

// GetAchievements mocks base method.
func (m *MockProgressService) GetAchievements(ctx context.Context, id string) ([]progress.UserAchievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAchievements", ctx, id)
	ret0, _ := ret[0].([]progress.UserAchievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAchievements indicates an expected call of GetAchievements.
func (mr *MockProgressServiceMockRecorder) GetAchievements(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAchievements", reflect.TypeOf((*MockProgressService)(nil).GetAchievements), ctx, id)
}

// GetBadges mocks base method.
func (m *MockProgressService) GetBadges(ctx context.Context, id string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBadges", ctx, id)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBadges indicates an expected call of GetBadges.
func (mr *MockProgressServiceMockRecorder) GetBadges(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBadges", reflect.TypeOf((*MockProgressService)(nil).GetBadges), ctx, id)
}

// GetXP mocks base method.
func (m *MockProgressService) GetXP(ctx context.Context, id string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXP", ctx, id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXP indicates an expected call of GetXP.
func (mr *MockProgressServiceMockRecorder) GetXP(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXP", reflect.TypeOf((*MockProgressService)(nil).GetXP), ctx, id)
}
