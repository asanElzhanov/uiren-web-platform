// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package lessons is a generated GoMock package.
package lessons

import (
	context "context"
	reflect "reflect"
	exercises "uiren/internal/app/exercises"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// addExerciseToList mocks base method.
func (m *Mockrepository) addExerciseToList(ctx context.Context, code, exerciseCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addExerciseToList", ctx, code, exerciseCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// addExerciseToList indicates an expected call of addExerciseToList.
func (mr *MockrepositoryMockRecorder) addExerciseToList(ctx, code, exerciseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addExerciseToList", reflect.TypeOf((*Mockrepository)(nil).addExerciseToList), ctx, code, exerciseCode)
}

// createLesson mocks base method.
func (m *Mockrepository) createLesson(ctx context.Context, dto CreateLessonDTO) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createLesson", ctx, dto)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createLesson indicates an expected call of createLesson.
func (mr *MockrepositoryMockRecorder) createLesson(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createLesson", reflect.TypeOf((*Mockrepository)(nil).createLesson), ctx, dto)
}

// deleteExerciseFromList mocks base method.
func (m *Mockrepository) deleteExerciseFromList(ctx context.Context, code, exerciseCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteExerciseFromList", ctx, code, exerciseCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteExerciseFromList indicates an expected call of deleteExerciseFromList.
func (mr *MockrepositoryMockRecorder) deleteExerciseFromList(ctx, code, exerciseCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteExerciseFromList", reflect.TypeOf((*Mockrepository)(nil).deleteExerciseFromList), ctx, code, exerciseCode)
}

// deleteLesson mocks base method.
func (m *Mockrepository) deleteLesson(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteLesson", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteLesson indicates an expected call of deleteLesson.
func (mr *MockrepositoryMockRecorder) deleteLesson(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteLesson", reflect.TypeOf((*Mockrepository)(nil).deleteLesson), ctx, code)
}

// getAllLessons mocks base method.
func (m *Mockrepository) getAllLessons(ctx context.Context) ([]lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllLessons", ctx)
	ret0, _ := ret[0].([]lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllLessons indicates an expected call of getAllLessons.
func (mr *MockrepositoryMockRecorder) getAllLessons(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllLessons", reflect.TypeOf((*Mockrepository)(nil).getAllLessons), ctx)
}

// getLesson mocks base method.
func (m *Mockrepository) getLesson(ctx context.Context, code string) (lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLesson", ctx, code)
	ret0, _ := ret[0].(lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getLesson indicates an expected call of getLesson.
func (mr *MockrepositoryMockRecorder) getLesson(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLesson", reflect.TypeOf((*Mockrepository)(nil).getLesson), ctx, code)
}

// getLessonsByCodes mocks base method.
func (m *Mockrepository) getLessonsByCodes(ctx context.Context, codes []string) ([]lesson, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getLessonsByCodes", ctx, codes)
	ret0, _ := ret[0].([]lesson)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getLessonsByCodes indicates an expected call of getLessonsByCodes.
func (mr *MockrepositoryMockRecorder) getLessonsByCodes(ctx, codes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getLessonsByCodes", reflect.TypeOf((*Mockrepository)(nil).getLessonsByCodes), ctx, codes)
}

// updateLesson mocks base method.
func (m *Mockrepository) updateLesson(ctx context.Context, code string, dto UpdateLessonDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateLesson", ctx, code, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateLesson indicates an expected call of updateLesson.
func (mr *MockrepositoryMockRecorder) updateLesson(ctx, code, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateLesson", reflect.TypeOf((*Mockrepository)(nil).updateLesson), ctx, code, dto)
}

// MockexerciseService is a mock of exerciseService interface.
type MockexerciseService struct {
	ctrl     *gomock.Controller
	recorder *MockexerciseServiceMockRecorder
}

// MockexerciseServiceMockRecorder is the mock recorder for MockexerciseService.
type MockexerciseServiceMockRecorder struct {
	mock *MockexerciseService
}

// NewMockexerciseService creates a new mock instance.
func NewMockexerciseService(ctrl *gomock.Controller) *MockexerciseService {
	mock := &MockexerciseService{ctrl: ctrl}
	mock.recorder = &MockexerciseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexerciseService) EXPECT() *MockexerciseServiceMockRecorder {
	return m.recorder
}

// GetExercisesByCodes mocks base method.
func (m *MockexerciseService) GetExercisesByCodes(ctx context.Context, codes []string) ([]exercises.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExercisesByCodes", ctx, codes)
	ret0, _ := ret[0].([]exercises.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExercisesByCodes indicates an expected call of GetExercisesByCodes.
func (mr *MockexerciseServiceMockRecorder) GetExercisesByCodes(ctx, codes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExercisesByCodes", reflect.TypeOf((*MockexerciseService)(nil).GetExercisesByCodes), ctx, codes)
}
