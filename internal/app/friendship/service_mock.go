// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package friendship is a generated GoMock package.
package friendship

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfriendshipRepository is a mock of friendshipRepository interface.
type MockfriendshipRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfriendshipRepositoryMockRecorder
}

// MockfriendshipRepositoryMockRecorder is the mock recorder for MockfriendshipRepository.
type MockfriendshipRepositoryMockRecorder struct {
	mock *MockfriendshipRepository
}

// NewMockfriendshipRepository creates a new mock instance.
func NewMockfriendshipRepository(ctrl *gomock.Controller) *MockfriendshipRepository {
	mock := &MockfriendshipRepository{ctrl: ctrl}
	mock.recorder = &MockfriendshipRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfriendshipRepository) EXPECT() *MockfriendshipRepositoryMockRecorder {
	return m.recorder
}

// changeFriendshipStatus mocks base method.
func (m *MockfriendshipRepository) changeFriendshipStatus(ctx context.Context, req FriendshipRequestDTO) (Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "changeFriendshipStatus", ctx, req)
	ret0, _ := ret[0].(Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// changeFriendshipStatus indicates an expected call of changeFriendshipStatus.
func (mr *MockfriendshipRepositoryMockRecorder) changeFriendshipStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "changeFriendshipStatus", reflect.TypeOf((*MockfriendshipRepository)(nil).changeFriendshipStatus), ctx, req)
}

// createFriendshipStatus mocks base method.
func (m *MockfriendshipRepository) createFriendshipStatus(ctx context.Context, req FriendshipRequestDTO) (Friendship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createFriendshipStatus", ctx, req)
	ret0, _ := ret[0].(Friendship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createFriendshipStatus indicates an expected call of createFriendshipStatus.
func (mr *MockfriendshipRepositoryMockRecorder) createFriendshipStatus(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createFriendshipStatus", reflect.TypeOf((*MockfriendshipRepository)(nil).createFriendshipStatus), ctx, req)
}

// deleteFriendship mocks base method.
func (m *MockfriendshipRepository) deleteFriendship(ctx context.Context, req FriendshipRequestDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteFriendship", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteFriendship indicates an expected call of deleteFriendship.
func (mr *MockfriendshipRepositoryMockRecorder) deleteFriendship(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteFriendship", reflect.TypeOf((*MockfriendshipRepository)(nil).deleteFriendship), ctx, req)
}

// getFriendList mocks base method.
func (m *MockfriendshipRepository) getFriendList(ctx context.Context, username string) (FriendList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getFriendList", ctx, username)
	ret0, _ := ret[0].(FriendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getFriendList indicates an expected call of getFriendList.
func (mr *MockfriendshipRepositoryMockRecorder) getFriendList(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFriendList", reflect.TypeOf((*MockfriendshipRepository)(nil).getFriendList), ctx, username)
}

// getFriendshipRecipient mocks base method.
func (m *MockfriendshipRepository) getFriendshipRecipient(ctx context.Context, username1, username2 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getFriendshipRecipient", ctx, username1, username2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getFriendshipRecipient indicates an expected call of getFriendshipRecipient.
func (mr *MockfriendshipRepositoryMockRecorder) getFriendshipRecipient(ctx, username1, username2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getFriendshipRecipient", reflect.TypeOf((*MockfriendshipRepository)(nil).getFriendshipRecipient), ctx, username1, username2)
}

// getRequestList mocks base method.
func (m *MockfriendshipRepository) getRequestList(ctx context.Context, username string) (FriendList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getRequestList", ctx, username)
	ret0, _ := ret[0].(FriendList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getRequestList indicates an expected call of getRequestList.
func (mr *MockfriendshipRepositoryMockRecorder) getRequestList(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getRequestList", reflect.TypeOf((*MockfriendshipRepository)(nil).getRequestList), ctx, username)
}

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// CheckUserExists mocks base method.
func (m *MockuserService) CheckUserExists(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserExists", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUserExists indicates an expected call of CheckUserExists.
func (mr *MockuserServiceMockRecorder) CheckUserExists(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserExists", reflect.TypeOf((*MockuserService)(nil).CheckUserExists), ctx, username)
}
