// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package exercises is a generated GoMock package.
package exercises

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// createExercise mocks base method.
func (m *Mockrepository) createExercise(ctx context.Context, dto CreateExerciseDTO) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createExercise", ctx, dto)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createExercise indicates an expected call of createExercise.
func (mr *MockrepositoryMockRecorder) createExercise(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createExercise", reflect.TypeOf((*Mockrepository)(nil).createExercise), ctx, dto)
}

// deleteExercise mocks base method.
func (m *Mockrepository) deleteExercise(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteExercise", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteExercise indicates an expected call of deleteExercise.
func (mr *MockrepositoryMockRecorder) deleteExercise(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteExercise", reflect.TypeOf((*Mockrepository)(nil).deleteExercise), ctx, code)
}

// exerciseExists mocks base method.
func (m *Mockrepository) exerciseExists(ctx context.Context, code string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "exerciseExists", ctx, code)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// exerciseExists indicates an expected call of exerciseExists.
func (mr *MockrepositoryMockRecorder) exerciseExists(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "exerciseExists", reflect.TypeOf((*Mockrepository)(nil).exerciseExists), ctx, code)
}

// getAllExercises mocks base method.
func (m *Mockrepository) getAllExercises(ctx context.Context) ([]Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllExercises", ctx)
	ret0, _ := ret[0].([]Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllExercises indicates an expected call of getAllExercises.
func (mr *MockrepositoryMockRecorder) getAllExercises(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllExercises", reflect.TypeOf((*Mockrepository)(nil).getAllExercises), ctx)
}

// getExercise mocks base method.
func (m *Mockrepository) getExercise(ctx context.Context, code string) (Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getExercise", ctx, code)
	ret0, _ := ret[0].(Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getExercise indicates an expected call of getExercise.
func (mr *MockrepositoryMockRecorder) getExercise(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getExercise", reflect.TypeOf((*Mockrepository)(nil).getExercise), ctx, code)
}

// getExerciseType mocks base method.
func (m *Mockrepository) getExerciseType(ctx context.Context, code string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getExerciseType", ctx, code)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getExerciseType indicates an expected call of getExerciseType.
func (mr *MockrepositoryMockRecorder) getExerciseType(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getExerciseType", reflect.TypeOf((*Mockrepository)(nil).getExerciseType), ctx, code)
}

// getExercisesByCodes mocks base method.
func (m *Mockrepository) getExercisesByCodes(ctx context.Context, codes []string) ([]Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getExercisesByCodes", ctx, codes)
	ret0, _ := ret[0].([]Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getExercisesByCodes indicates an expected call of getExercisesByCodes.
func (mr *MockrepositoryMockRecorder) getExercisesByCodes(ctx, codes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getExercisesByCodes", reflect.TypeOf((*Mockrepository)(nil).getExercisesByCodes), ctx, codes)
}

// updateExercise mocks base method.
func (m *Mockrepository) updateExercise(ctx context.Context, code string, dto UpdateExerciseDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateExercise", ctx, code, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateExercise indicates an expected call of updateExercise.
func (mr *MockrepositoryMockRecorder) updateExercise(ctx, code, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateExercise", reflect.TypeOf((*Mockrepository)(nil).updateExercise), ctx, code, dto)
}
