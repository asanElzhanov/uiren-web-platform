// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package auth is a generated GoMock package.
package auth

import (
	context "context"
	reflect "reflect"
	time "time"
	users "uiren/internal/app/users"
	jwt "uiren/internal/infrastracture/jwt"

	gomock "github.com/golang/mock/gomock"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockuserService) CreateUser(ctx context.Context, params users.CreateUserDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, params)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockuserServiceMockRecorder) CreateUser(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockuserService)(nil).CreateUser), ctx, params)
}

// EnableUser mocks base method.
func (m *MockuserService) EnableUser(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUser", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableUser indicates an expected call of EnableUser.
func (mr *MockuserServiceMockRecorder) EnableUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUser", reflect.TypeOf((*MockuserService)(nil).EnableUser), ctx, username)
}

// GetUserForLogin mocks base method.
func (m *MockuserService) GetUserForLogin(ctx context.Context, indetifier string) (users.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserForLogin", ctx, indetifier)
	ret0, _ := ret[0].(users.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserForLogin indicates an expected call of GetUserForLogin.
func (mr *MockuserServiceMockRecorder) GetUserForLogin(ctx, indetifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserForLogin", reflect.TypeOf((*MockuserService)(nil).GetUserForLogin), ctx, indetifier)
}

// MockjwtMaker is a mock of jwtMaker interface.
type MockjwtMaker struct {
	ctrl     *gomock.Controller
	recorder *MockjwtMakerMockRecorder
}

// MockjwtMakerMockRecorder is the mock recorder for MockjwtMaker.
type MockjwtMakerMockRecorder struct {
	mock *MockjwtMaker
}

// NewMockjwtMaker creates a new mock instance.
func NewMockjwtMaker(ctrl *gomock.Controller) *MockjwtMaker {
	mock := &MockjwtMaker{ctrl: ctrl}
	mock.recorder = &MockjwtMakerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockjwtMaker) EXPECT() *MockjwtMakerMockRecorder {
	return m.recorder
}

// NewToken mocks base method.
func (m *MockjwtMaker) NewToken(payload jwt.PayloadDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewToken", payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewToken indicates an expected call of NewToken.
func (mr *MockjwtMakerMockRecorder) NewToken(payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewToken", reflect.TypeOf((*MockjwtMaker)(nil).NewToken), payload)
}

// MockredisClient is a mock of redisClient interface.
type MockredisClient struct {
	ctrl     *gomock.Controller
	recorder *MockredisClientMockRecorder
}

// MockredisClientMockRecorder is the mock recorder for MockredisClient.
type MockredisClientMockRecorder struct {
	mock *MockredisClient
}

// NewMockredisClient creates a new mock instance.
func NewMockredisClient(ctrl *gomock.Controller) *MockredisClient {
	mock := &MockredisClient{ctrl: ctrl}
	mock.recorder = &MockredisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockredisClient) EXPECT() *MockredisClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockredisClient) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockredisClientMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockredisClient)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockredisClient) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockredisClientMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockredisClient)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockredisClient) Set(ctx context.Context, key string, value interface{}, ttl *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockredisClientMockRecorder) Set(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockredisClient)(nil).Set), ctx, key, value, ttl)
}

// MockverificationCodeRepository is a mock of verificationCodeRepository interface.
type MockverificationCodeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockverificationCodeRepositoryMockRecorder
}

// MockverificationCodeRepositoryMockRecorder is the mock recorder for MockverificationCodeRepository.
type MockverificationCodeRepositoryMockRecorder struct {
	mock *MockverificationCodeRepository
}

// NewMockverificationCodeRepository creates a new mock instance.
func NewMockverificationCodeRepository(ctrl *gomock.Controller) *MockverificationCodeRepository {
	mock := &MockverificationCodeRepository{ctrl: ctrl}
	mock.recorder = &MockverificationCodeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockverificationCodeRepository) EXPECT() *MockverificationCodeRepositoryMockRecorder {
	return m.recorder
}

// createVerificationCode mocks base method.
func (m *MockverificationCodeRepository) createVerificationCode(ctx context.Context, req CreateVerificationCodeRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createVerificationCode", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// createVerificationCode indicates an expected call of createVerificationCode.
func (mr *MockverificationCodeRepositoryMockRecorder) createVerificationCode(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createVerificationCode", reflect.TypeOf((*MockverificationCodeRepository)(nil).createVerificationCode), ctx, req)
}

// getVerificationCode mocks base method.
func (m *MockverificationCodeRepository) getVerificationCode(ctx context.Context, username string) (Verification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getVerificationCode", ctx, username)
	ret0, _ := ret[0].(Verification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getVerificationCode indicates an expected call of getVerificationCode.
func (mr *MockverificationCodeRepositoryMockRecorder) getVerificationCode(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getVerificationCode", reflect.TypeOf((*MockverificationCodeRepository)(nil).getVerificationCode), ctx, username)
}
