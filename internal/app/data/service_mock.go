// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package data is a generated GoMock package.
package data

import (
	context "context"
	reflect "reflect"
	time "time"
	achievements "uiren/internal/app/achievements"
	exercises "uiren/internal/app/exercises"
	lessons "uiren/internal/app/lessons"
	modules "uiren/internal/app/modules"
	progress "uiren/internal/app/progress"
	users "uiren/internal/app/users"

	gomock "github.com/golang/mock/gomock"
)

// MockuserService is a mock of userService interface.
type MockuserService struct {
	ctrl     *gomock.Controller
	recorder *MockuserServiceMockRecorder
}

// MockuserServiceMockRecorder is the mock recorder for MockuserService.
type MockuserServiceMockRecorder struct {
	mock *MockuserService
}

// NewMockuserService creates a new mock instance.
func NewMockuserService(ctrl *gomock.Controller) *MockuserService {
	mock := &MockuserService{ctrl: ctrl}
	mock.recorder = &MockuserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserService) EXPECT() *MockuserServiceMockRecorder {
	return m.recorder
}

// GetUserByUsername mocks base method.
func (m *MockuserService) GetUserByUsername(ctx context.Context, username string) (users.UserDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", ctx, username)
	ret0, _ := ret[0].(users.UserDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockuserServiceMockRecorder) GetUserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockuserService)(nil).GetUserByUsername), ctx, username)
}

// GetUserProgress mocks base method.
func (m *MockuserService) GetUserProgress(ctx context.Context, id string) (users.UserProgress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProgress", ctx, id)
	ret0, _ := ret[0].(users.UserProgress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProgress indicates an expected call of GetUserProgress.
func (mr *MockuserServiceMockRecorder) GetUserProgress(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProgress", reflect.TypeOf((*MockuserService)(nil).GetUserProgress), ctx, id)
}

// MockmodulesService is a mock of modulesService interface.
type MockmodulesService struct {
	ctrl     *gomock.Controller
	recorder *MockmodulesServiceMockRecorder
}

// MockmodulesServiceMockRecorder is the mock recorder for MockmodulesService.
type MockmodulesServiceMockRecorder struct {
	mock *MockmodulesService
}

// NewMockmodulesService creates a new mock instance.
func NewMockmodulesService(ctrl *gomock.Controller) *MockmodulesService {
	mock := &MockmodulesService{ctrl: ctrl}
	mock.recorder = &MockmodulesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockmodulesService) EXPECT() *MockmodulesServiceMockRecorder {
	return m.recorder
}

// GetModulesList mocks base method.
func (m *MockmodulesService) GetModulesList(ctx context.Context) ([]modules.Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModulesList", ctx)
	ret0, _ := ret[0].([]modules.Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModulesList indicates an expected call of GetModulesList.
func (mr *MockmodulesServiceMockRecorder) GetModulesList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModulesList", reflect.TypeOf((*MockmodulesService)(nil).GetModulesList), ctx)
}

// MocklessonsService is a mock of lessonsService interface.
type MocklessonsService struct {
	ctrl     *gomock.Controller
	recorder *MocklessonsServiceMockRecorder
}

// MocklessonsServiceMockRecorder is the mock recorder for MocklessonsService.
type MocklessonsServiceMockRecorder struct {
	mock *MocklessonsService
}

// NewMocklessonsService creates a new mock instance.
func NewMocklessonsService(ctrl *gomock.Controller) *MocklessonsService {
	mock := &MocklessonsService{ctrl: ctrl}
	mock.recorder = &MocklessonsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklessonsService) EXPECT() *MocklessonsServiceMockRecorder {
	return m.recorder
}

// GetLesson mocks base method.
func (m *MocklessonsService) GetLesson(ctx context.Context, code string) (lessons.LessonDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLesson", ctx, code)
	ret0, _ := ret[0].(lessons.LessonDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLesson indicates an expected call of GetLesson.
func (mr *MocklessonsServiceMockRecorder) GetLesson(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLesson", reflect.TypeOf((*MocklessonsService)(nil).GetLesson), ctx, code)
}

// MockexerciseService is a mock of exerciseService interface.
type MockexerciseService struct {
	ctrl     *gomock.Controller
	recorder *MockexerciseServiceMockRecorder
}

// MockexerciseServiceMockRecorder is the mock recorder for MockexerciseService.
type MockexerciseServiceMockRecorder struct {
	mock *MockexerciseService
}

// NewMockexerciseService creates a new mock instance.
func NewMockexerciseService(ctrl *gomock.Controller) *MockexerciseService {
	mock := &MockexerciseService{ctrl: ctrl}
	mock.recorder = &MockexerciseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexerciseService) EXPECT() *MockexerciseServiceMockRecorder {
	return m.recorder
}

// GetExercise mocks base method.
func (m *MockexerciseService) GetExercise(ctx context.Context, code string) (exercises.Exercise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExercise", ctx, code)
	ret0, _ := ret[0].(exercises.Exercise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExercise indicates an expected call of GetExercise.
func (mr *MockexerciseServiceMockRecorder) GetExercise(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExercise", reflect.TypeOf((*MockexerciseService)(nil).GetExercise), ctx, code)
}

// MockredisClient is a mock of redisClient interface.
type MockredisClient struct {
	ctrl     *gomock.Controller
	recorder *MockredisClientMockRecorder
}

// MockredisClientMockRecorder is the mock recorder for MockredisClient.
type MockredisClientMockRecorder struct {
	mock *MockredisClient
}

// NewMockredisClient creates a new mock instance.
func NewMockredisClient(ctrl *gomock.Controller) *MockredisClient {
	mock := &MockredisClient{ctrl: ctrl}
	mock.recorder = &MockredisClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockredisClient) EXPECT() *MockredisClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockredisClient) Delete(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockredisClientMockRecorder) Delete(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockredisClient)(nil).Delete), ctx, key)
}

// Get mocks base method.
func (m *MockredisClient) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockredisClientMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockredisClient)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockredisClient) Set(ctx context.Context, key string, value interface{}, ttl *time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockredisClientMockRecorder) Set(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockredisClient)(nil).Set), ctx, key, value, ttl)
}

// MockprogressService is a mock of progressService interface.
type MockprogressService struct {
	ctrl     *gomock.Controller
	recorder *MockprogressServiceMockRecorder
}

// MockprogressServiceMockRecorder is the mock recorder for MockprogressService.
type MockprogressServiceMockRecorder struct {
	mock *MockprogressService
}

// NewMockprogressService creates a new mock instance.
func NewMockprogressService(ctrl *gomock.Controller) *MockprogressService {
	mock := &MockprogressService{ctrl: ctrl}
	mock.recorder = &MockprogressServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprogressService) EXPECT() *MockprogressServiceMockRecorder {
	return m.recorder
}

// GetXPLeaderboard mocks base method.
func (m *MockprogressService) GetXPLeaderboard(ctx context.Context, limit int) (progress.XPLeaderboard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetXPLeaderboard", ctx, limit)
	ret0, _ := ret[0].(progress.XPLeaderboard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetXPLeaderboard indicates an expected call of GetXPLeaderboard.
func (mr *MockprogressServiceMockRecorder) GetXPLeaderboard(ctx, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetXPLeaderboard", reflect.TypeOf((*MockprogressService)(nil).GetXPLeaderboard), ctx, limit)
}

// MockachievementsService is a mock of achievementsService interface.
type MockachievementsService struct {
	ctrl     *gomock.Controller
	recorder *MockachievementsServiceMockRecorder
}

// MockachievementsServiceMockRecorder is the mock recorder for MockachievementsService.
type MockachievementsServiceMockRecorder struct {
	mock *MockachievementsService
}

// NewMockachievementsService creates a new mock instance.
func NewMockachievementsService(ctrl *gomock.Controller) *MockachievementsService {
	mock := &MockachievementsService{ctrl: ctrl}
	mock.recorder = &MockachievementsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockachievementsService) EXPECT() *MockachievementsServiceMockRecorder {
	return m.recorder
}

// GetAllAchievements mocks base method.
func (m *MockachievementsService) GetAllAchievements(ctx context.Context) ([]achievements.AchievementDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAchievements", ctx)
	ret0, _ := ret[0].([]achievements.AchievementDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAchievements indicates an expected call of GetAllAchievements.
func (mr *MockachievementsServiceMockRecorder) GetAllAchievements(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAchievements", reflect.TypeOf((*MockachievementsService)(nil).GetAllAchievements), ctx)
}
