// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package modules is a generated GoMock package.
package modules

import (
	context "context"
	reflect "reflect"
	lessons "uiren/internal/app/lessons"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Mockrepository is a mock of repository interface.
type Mockrepository struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryMockRecorder
}

// MockrepositoryMockRecorder is the mock recorder for Mockrepository.
type MockrepositoryMockRecorder struct {
	mock *Mockrepository
}

// NewMockrepository creates a new mock instance.
func NewMockrepository(ctrl *gomock.Controller) *Mockrepository {
	mock := &Mockrepository{ctrl: ctrl}
	mock.recorder = &MockrepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockrepository) EXPECT() *MockrepositoryMockRecorder {
	return m.recorder
}

// addLessonToList mocks base method.
func (m *Mockrepository) addLessonToList(ctx context.Context, code, lessonCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "addLessonToList", ctx, code, lessonCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// addLessonToList indicates an expected call of addLessonToList.
func (mr *MockrepositoryMockRecorder) addLessonToList(ctx, code, lessonCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "addLessonToList", reflect.TypeOf((*Mockrepository)(nil).addLessonToList), ctx, code, lessonCode)
}

// createModule mocks base method.
func (m *Mockrepository) createModule(ctx context.Context, dto CreateModuleDTO) (primitive.ObjectID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createModule", ctx, dto)
	ret0, _ := ret[0].(primitive.ObjectID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createModule indicates an expected call of createModule.
func (mr *MockrepositoryMockRecorder) createModule(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createModule", reflect.TypeOf((*Mockrepository)(nil).createModule), ctx, dto)
}

// deleteLessonFromList mocks base method.
func (m *Mockrepository) deleteLessonFromList(ctx context.Context, code, lessonCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteLessonFromList", ctx, code, lessonCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteLessonFromList indicates an expected call of deleteLessonFromList.
func (mr *MockrepositoryMockRecorder) deleteLessonFromList(ctx, code, lessonCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteLessonFromList", reflect.TypeOf((*Mockrepository)(nil).deleteLessonFromList), ctx, code, lessonCode)
}

// deleteModule mocks base method.
func (m *Mockrepository) deleteModule(ctx context.Context, code string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "deleteModule", ctx, code)
	ret0, _ := ret[0].(error)
	return ret0
}

// deleteModule indicates an expected call of deleteModule.
func (mr *MockrepositoryMockRecorder) deleteModule(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "deleteModule", reflect.TypeOf((*Mockrepository)(nil).deleteModule), ctx, code)
}

// getAllModules mocks base method.
func (m *Mockrepository) getAllModules(ctx context.Context) ([]Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getAllModules", ctx)
	ret0, _ := ret[0].([]Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getAllModules indicates an expected call of getAllModules.
func (mr *MockrepositoryMockRecorder) getAllModules(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getAllModules", reflect.TypeOf((*Mockrepository)(nil).getAllModules), ctx)
}

// getModule mocks base method.
func (m *Mockrepository) getModule(ctx context.Context, code string) (Module, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getModule", ctx, code)
	ret0, _ := ret[0].(Module)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getModule indicates an expected call of getModule.
func (mr *MockrepositoryMockRecorder) getModule(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getModule", reflect.TypeOf((*Mockrepository)(nil).getModule), ctx, code)
}

// updateModule mocks base method.
func (m *Mockrepository) updateModule(ctx context.Context, code string, dto UpdateModuleDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "updateModule", ctx, code, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// updateModule indicates an expected call of updateModule.
func (mr *MockrepositoryMockRecorder) updateModule(ctx, code, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "updateModule", reflect.TypeOf((*Mockrepository)(nil).updateModule), ctx, code, dto)
}

// MocklessonsService is a mock of lessonsService interface.
type MocklessonsService struct {
	ctrl     *gomock.Controller
	recorder *MocklessonsServiceMockRecorder
}

// MocklessonsServiceMockRecorder is the mock recorder for MocklessonsService.
type MocklessonsServiceMockRecorder struct {
	mock *MocklessonsService
}

// NewMocklessonsService creates a new mock instance.
func NewMocklessonsService(ctrl *gomock.Controller) *MocklessonsService {
	mock := &MocklessonsService{ctrl: ctrl}
	mock.recorder = &MocklessonsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocklessonsService) EXPECT() *MocklessonsServiceMockRecorder {
	return m.recorder
}

// GetLessonsByCodes mocks base method.
func (m *MocklessonsService) GetLessonsByCodes(ctx context.Context, codes []string) ([]lessons.LessonDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLessonsByCodes", ctx, codes)
	ret0, _ := ret[0].([]lessons.LessonDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLessonsByCodes indicates an expected call of GetLessonsByCodes.
func (mr *MocklessonsServiceMockRecorder) GetLessonsByCodes(ctx, codes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLessonsByCodes", reflect.TypeOf((*MocklessonsService)(nil).GetLessonsByCodes), ctx, codes)
}
